validation

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/__pycache__/game.cpython-39.pyc b/__pycache__/game.cpython-39.pyc
index 568f378..0671ae4 100644
Binary files a/__pycache__/game.cpython-39.pyc and b/__pycache__/game.cpython-39.pyc differ
diff --git a/__pycache__/main.cpython-39.pyc b/__pycache__/main.cpython-39.pyc
index 620b7a1..9cc8e2b 100644
Binary files a/__pycache__/main.cpython-39.pyc and b/__pycache__/main.cpython-39.pyc differ
diff --git a/__pycache__/player.cpython-39.pyc b/__pycache__/player.cpython-39.pyc
index 43b9fcf..95af306 100644
Binary files a/__pycache__/player.cpython-39.pyc and b/__pycache__/player.cpython-39.pyc differ
diff --git a/__pycache__/projectile.cpython-39.pyc b/__pycache__/projectile.cpython-39.pyc
index 4d9db3c..84c564c 100644
Binary files a/__pycache__/projectile.cpython-39.pyc and b/__pycache__/projectile.cpython-39.pyc differ
diff --git a/assets/vaisseaux/left.png b/assets/vaisseaux/left.png
deleted file mode 100644
index 92399d4..0000000
Binary files a/assets/vaisseaux/left.png and /dev/null differ
diff --git a/assets/vaisseaux/nomove.png b/assets/vaisseaux/nomove.png
deleted file mode 100644
index 6bf59ef..0000000
Binary files a/assets/vaisseaux/nomove.png and /dev/null differ
diff --git a/assets/vaisseaux/right.png b/assets/vaisseaux/right.png
deleted file mode 100644
index 4a66cf9..0000000
Binary files a/assets/vaisseaux/right.png and /dev/null differ
diff --git a/game.py b/game.py
index 6cce5f5..75e6c01 100644
--- a/game.py
+++ b/game.py
@@ -1,8 +1,20 @@
-import pygame
 from player import Player
+from monster import Monster
+import pygame
 #Classe jeu #
-class Game:
+class Game():
+
     def __init__(self):
         #Génère notre joueur#
-        self.player = Player()
+        self.player = Player(self) 
+        self.monster = Monster(self)
+        self.all_monsters = pygame.sprite.Group()
         self.pressed = {}
+        self.spawn_monster()
+    
+    def check_collision(self, sprite, group) :
+        return pygame.sprite.spritecollide(sprite, group, False, pygame.sprite.collide_mask)
+
+    def spawn_monster(self) :
+        monster = Monster(self)
+        self.all_monsters.add(monster)
diff --git a/main.py b/main.py
index 070bdae..9d3e7d5 100644
--- a/main.py
+++ b/main.py
@@ -1,6 +1,9 @@
+from random import randint
 import time
 import pygame
 from game import Game
+from player import Player
+from monster import Monster
 pygame.init()
 
 #Temps du jeu #
@@ -9,7 +12,7 @@ clock = pygame.time.Clock()
 pygame.display.set_caption("SpaceShoot")
 screen = pygame.display.set_mode((400, 600))
 #background#
-background = pygame.image.load('pythonProject/assets/fond/frameBackground.png')
+background = pygame.image.load('assets/fond/frameBackground.png')
 background = pygame.transform.scale(background,(400,600))
 y_background = 0
 
@@ -17,10 +20,12 @@ y_background = 0
 game = Game()
 # Boucle jeu #
 running = True
-pygame.key.set_repeat
+#Delai spawn des monstres #
+spawn_delay = 2000
+delay =  pygame.time.get_ticks()
 while running :
     #appliquer arrière plan et défilement#
-    y_background += 1
+    y_background += 1/2
     if y_background < 600 :
         screen.blit(background,(0,y_background))
         screen.blit(background, (0, y_background-600))
@@ -29,34 +34,52 @@ while running :
         screen.blit(background, (0, y_background))
     #Appliquer image de notre joueur#
     screen.blit(game.player.image, game.player.rect)
-    clock.tick(130)
-    #récupérer tout les projectiles du joueur #
+    clock.tick(80)
+    # Actualiser la barre de vie du joueur #
+    game.player.update_health_bar(screen)
+    #récupérer tout les projectiles du joueur ainsi que les monstres #
     for projectile in game.player.all_projectiles :
         projectile.move()
+    for laser in game.monster.all_laser :
+        laser.move()
+    for monster in game.all_monsters :
+        monster.forward()
+
     #Appliquer l'ensemble de mon grp de projectiles en les dessinant#
     game.player.all_projectiles.draw(screen)
-
+    game.monster.all_laser.draw(screen)
+    # Spawn des montres #
+    now = pygame.time.get_ticks()
+    if now - delay > spawn_delay :
+        game.spawn_monster()
+        delay = now
+    game.monster.launch_laser()
+    #Appliquer l'ensemble des ennemies sur l'écran en les dessinant #
+    game.all_monsters.draw(screen)
     # vérifier si le joueur souhaite bouger ou tirer#
+    if not(game.pressed.get(pygame.K_SPACE)):
+        if game.pressed.get(pygame.K_DOWN) and game.player.rect.y + (game.player.rect.height) < screen.get_height():
+            game.player.move_down()
+        if game.pressed.get(pygame.K_UP) and game.player.rect.y > 0:
+            game.player.move_up()
+        if game.pressed.get(pygame.K_RIGHT) and game.player.rect.x + (game.player.rect.width) / 2 < screen.get_width():
+            game.player.move_right()
+        if game.pressed.get(pygame.K_LEFT) and game.player.rect.x > 0 - (game.player.rect.width) / 2:
+            game.player.move_left() 
     if game.pressed.get(pygame.K_SPACE):
         game.player.launch_projectile()
-    if game.pressed.get(pygame.K_DOWN) and game.player.rect.y + (game.player.rect.height) < screen.get_height():
-        game.player.move_down()
-        if game.pressed.get(pygame.K_SPACE):
-            game.player.launch_projectile()
-    if game.pressed.get(pygame.K_UP) and game.player.rect.y > 0:
-        game.player.move_up()
-        if game.pressed.get(pygame.K_SPACE):
-            game.player.launch_projectile()
-    if game.pressed.get(pygame.K_RIGHT) and game.player.rect.x + (game.player.rect.width) / 2 < screen.get_width():
-        game.player.move_right()
-        if game.pressed.get(pygame.K_SPACE):
-            game.player.launch_projectile()
-    if game.pressed.get(pygame.K_LEFT) and game.player.rect.x > 0 - (game.player.rect.width) / 2:
-        game.player.move_left()
-        if game.pressed.get(pygame.K_SPACE):
-            game.player.launch_projectile()
-
-
+        if game.pressed.get(pygame.K_DOWN) and game.player.rect.y + (game.player.rect.height) < screen.get_height():
+            game.player.move_down()
+        if game.pressed.get(pygame.K_UP) and game.player.rect.y > 0:
+            game.player.move_up()
+        if game.pressed.get(pygame.K_RIGHT) and game.player.rect.x + (game.player.rect.width) / 2 < screen.get_width():
+            game.player.move_right()
+        if game.pressed.get(pygame.K_LEFT) and game.player.rect.x > 0 - (game.player.rect.width) / 2:
+            game.player.move_left()
+    # verification de la barre de vie #
+    if game.player.collision() == False :
+        game.player.destruction()
+    
     #mettre à jour l'écran  #
     pygame.display.flip()
     #fermeture du jeu#
diff --git a/player.py b/player.py
index 4649f58..a2bf289 100644
--- a/player.py
+++ b/player.py
@@ -1,43 +1,59 @@
 import pygame
 from projectile import Projectile
+from monster import Monster
 #Classe joueur #
 class Player(pygame.sprite.Sprite):
-    def __init__(self):
+    def __init__(self, game):
         super().__init__()
-        self.health = 3
-        self.max_health = 3
+        self.game = game
+        self.health = 100
+        self.max_health = 100
         self.attack = 10
-        self.velocity = 3
+        self.velocity = 4
         self.all_projectiles = pygame.sprite.Group()
-        self.image = pygame.image.load('pythonProject/assets/vaisseaux/nomove.png')
+        self.image = pygame.image.load('assets/vaisseaux/player/ship 01/nomove.png')
         self.image = pygame.transform.scale(self.image, (80,80))
         self.rect = self.image.get_rect()
         self.rect.x = 129
         self.rect.y = 500
         self.shoot_delay = 150
-        self.last_shoot =  pygame.time.get_ticks()
+        self.delay =  pygame.time.get_ticks()
+    
+    def update_health_bar(self,surface) :
+        pygame.draw.rect(surface,(218,80,25), [(self.rect.x) -10, self.rect.y + 80 , self.max_health,5])
+        pygame.draw.rect(surface,(111,210,46), [(self.rect.x)-10 , self.rect.y + 80,self.health,5])
+
     def launch_projectile(self):
         #Création nouvelle instance du projectile#
         now = pygame.time.get_ticks()
-        if now - self.last_shoot > self.shoot_delay:
+        if now - self.delay > self.shoot_delay:
             self.all_projectiles.add(Projectile(self))
-            self.last_shoot = now
+            self.delay = now
     def move_right(self):
         self.rect.x += self.velocity
-        self.image = pygame.image.load('pythonProject/assets/vaisseaux/right.png')
+        self.image = pygame.image.load('assets/vaisseaux/player/ship 01/right.png')
         self.image = pygame.transform.scale(self.image, (80, 80))
     def move_left(self):
         self.rect.x -= self.velocity
-        self.image = pygame.image.load('pythonProject/assets/vaisseaux/left.png')
+        self.image = pygame.image.load('assets/vaisseaux/player/ship 01/left.png')
         self.image = pygame.transform.scale(self.image, (80,80))
     def move_up(self):
         self.rect.y -= self.velocity
-        self.image = pygame.image.load('pythonProject/assets/vaisseaux/nomove.png')
+        self.image = pygame.image.load('assets/vaisseaux/player/ship 01/nomove.png')
         self.image = pygame.transform.scale(self.image, (80,80))
     def move_down(self):
         self.rect.y += self.velocity
-        self.image = pygame.image.load('pythonProject/assets/vaisseaux/nomove.png')
+        self.image = pygame.image.load('assets/vaisseaux/player/ship 01/nomove.png')
         self.image = pygame.transform.scale(self.image, (80,80))
     def no_move(self):
-        self.image = pygame.image.load('pythonProject/assets/vaisseaux/nomove.png')
-        self.image = pygame.transform.scale(self.image, (80,80))
\ No newline at end of file
+        self.image = pygame.image.load('assets/vaisseaux/player/ship 01/nomove.png')
+        self.image = pygame.transform.scale(self.image, (80,80))
+    def collision(self) :
+        if self.game.check_collision(self, self.game.all_monsters):
+            if self.health > 0 :
+                self.health -= 1
+            else :
+                return False
+    def destruction(self):
+        self.image = pygame.image.load('assets/vaisseaux/explosion/explosion4.png')
+            
\ No newline at end of file
diff --git a/projectile.py b/projectile.py
index 87da6ba..d41b8cc 100644
--- a/projectile.py
+++ b/projectile.py
@@ -6,7 +6,7 @@ class Projectile(pygame.sprite.Sprite) :
         super().__init__()
         self.velocity = 3.5
         self.player = player
-        self.image = pygame.image.load('pythonProject/assets/missiles/PlayProjectile.png')
+        self.image = pygame.image.load('assets/missiles/PlayProjectile.png')
         self.image = pygame.transform.scale(self.image, (20,20))
         self.rect = self.image.get_rect()
         self.rect.x = player.rect.x + (player.rect.width)/2 - self.image.get_width()/2